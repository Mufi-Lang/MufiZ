pub const chunk_h = @cImport(@cInclude("chunk.h"));
pub const common_h = @cImport(@cInclude("common.h"));
pub const compiler_h = @cImport(@cInclude("compiler.h"));
pub const debug_h = @cImport(@cInclude("debug.h"));
pub const memory_h = @cImport(@cInclude("memory.h"));
pub const object_h = @cImport(@cInclude("object.h"));
pub const pre_h = @cImport(@cInclude("pre.h"));
pub const scanner_h = @cImport(@cInclude("scanner.h"));
pub const table_h = @cImport(@cInclude("table.h"));
pub const value_h = @cImport(@cInclude("value.h"));
pub const vm_h = @cImport(@cInclude("vm.h"));

pub const Chunk = chunk_h.Chunk;
pub const OpCode = chunk_h.OpCode;
pub const OP_CONSTANT = chunk_h.OP_CONSTANT;
pub const OP_NIL = chunk_h.OP_NIL;
pub const OP_TRUE = chunk_h.OP_TRUE;
pub const OP_FALSE = chunk_h.OP_FALSE;
pub const OP_POP = chunk_h.OP_POP;
pub const OP_GET_LOCAL = chunk_h.OP_GET_LOCAL;
pub const OP_SET_LOCAL = chunk_h.OP_SET_LOCAL;
pub const OP_GET_GLOBAL = chunk_h.OP_GET_GLOBAL;
pub const OP_DEFINE_GLOBAL = chunk_h.OP_DEFINE_GLOBAL;
pub const OP_SET_GLOBAL = chunk_h.OP_SET_GLOBAL;
pub const OP_GET_UPVALUE = chunk_h.OP_GET_UPVALUE;
pub const OP_SET_UPVALUE = chunk_h.OP_SET_UPVALUE;
pub const OP_GET_PROPERTY = chunk_h.OP_GET_PROPERTY;
pub const OP_SET_PROPERTY = chunk_h.OP_SET_PROPERTY;
pub const OP_GET_SUPER = chunk_h.OP_GET_SUPER;
pub const OP_EQUAL = chunk_h.OP_EQUAL;
pub const OP_GREATER = chunk_h.OP_GREATER;
pub const OP_LESS = chunk_h.OP_LESS;
pub const OP_ADD = chunk_h.OP_ADD;
pub const OP_SUBTRACT = chunk_h.OP_SUBTRACT;
pub const OP_MULTIPLY = chunk_h.OP_MULTIPLY;
pub const OP_DIVIDE = chunk_h.OP_DIVIDE;
pub const OP_NOT = chunk_h.OP_NOT;
pub const OP_NEGATE = chunk_h.OP_NEGATE;
pub const OP_PRINT = chunk_h.OP_PRINT;
pub const OP_JUMP = chunk_h.OP_JUMP;
pub const OP_JUMP_IF_FALSE = chunk_h.OP_JUMP_IF_FALSE;
pub const OP_LOOP = chunk_h.OP_LOOP;
pub const OP_CALL = chunk_h.OP_CALL;
pub const OP_INVOKE = chunk_h.OP_INVOKE;
pub const OP_SUPER_INVOKE = chunk_h.OP_SUPER_INVOKE;
pub const OP_CLOSURE = chunk_h.OP_CLOSURE;
pub const OP_CLOSE_UPVALUE = chunk_h.OP_CLOSE_UPVALUE;
pub const OP_RETURN = chunk_h.OP_RETURN;
pub const OP_CLASS = chunk_h.OP_CLASS;
pub const OP_INHERIT = chunk_h.OP_INHERIT;
pub const OP_METHOD = chunk_h.OP_METHOD;

pub const ObjType = object_h.ObjType;
pub const OBJ_CLOSURE = object_h.OBJ_CLOSURE;
pub const OBJ_FUNCTION = object_h.OBJ_FUNCTION;
pub const OBJ_NATIVE = object_h.OBJ_NATIVE;
pub const OBJ_STRING = object_h.OBJ_STRING;
pub const OBJ_UPVALUE = object_h.OBJ_UPVALUE;
pub const OBJ_CLASS = object_h.OBJ_CLASS;
pub const OBJ_INSTANCE = object_h.OBJ_INSTANCE;
pub const OBJ_BOUND_METHOD = object_h.OBJ_BOUND_METHOD;
pub const OBJ_ARRAY = object_h.OBJ_ARRAY;
pub const OBJ_HASH_TABLE = object_h.OBJ_HASH_TABLE;
pub const OBJ_LINKED_LIST = object_h.OBJ_LINKED_LIST;

pub const Obj = object_h.Obj;
pub const ObjString = object_h.ObjString;
pub const ObjFunction = object_h.ObjFunction;
pub const ObjUpvalue = object_h.ObjUpvalue;
pub const ObjClosure = object_h.ObjClosure;
pub const ObjNative = object_h.ObjNative;
pub const ObjClass = object_h.ObjClass;
pub const ObjInstance = object_h.ObjInstance;
pub const ObjBoundMethod = object_h.ObjBoundMethod;
pub const Node = object_h.Node;
pub const ObjLinkedList = object_h.ObjLinkedList;
pub const ObjHashTable = object_h.ObjHashTable;
pub const ObjArray = object_h.ObjArray;
pub const copyString = object_h.copyString;

pub const Value = value_h.Value;
pub const ValueType = value_h.ValueType;
pub const VAL_BOOL = value_h.VAL_BOOL;
pub const VAL_NIL = value_h.VAL_NIL;
pub const VAL_INT = value_h.VAL_INT;
pub const VAL_DOUBLE = value_h.VAL_DOUBLE;
pub const VAL_OBJ = value_h.VAL_OBJ;
pub const VAL_COMPLEX = value_h.VAL_COMPLEX;
pub const ValueArray = value_h.ValueArray;
pub const Complex = value_h.Complex;
