// Simple range properties test to isolate the foreach issue
// This test focuses on the key patterns discovered

print("=== Simple Range Props Test ===");

// Test 1: Range as first object
print("Test 1: First object range");
var first_range = 1..4;
print("Range: " + first_range);

var count1 = 0;
foreach (val in first_range) {
    count1 = count1 + 1;
}
print("Count: " + count1);

// Test 2: Range after vector
print("Test 2: Range after vector");
var vec = {10, 20};
print("Vector: " + vec);

var second_range = 1..4;
print("Range: " + second_range);

var count2 = 0;
foreach (val in second_range) {
    count2 = count2 + 1;
}
print("Count: " + count2);

// Test 3: Inclusive range after vector
print("Test 3: Inclusive after vector");
var incl_range = 1..=4;
print("Inclusive: " + incl_range);

var count3 = 0;
foreach (val in incl_range) {
    count3 = count3 + 1;
}
print("Count: " + count3);

// Test 4: Manual indexing
print("Test 4: Manual indexing");
print("second_range[0]: " + second_range[0]);
print("second_range[1]: " + second_range[1]);
print("second_range[2]: " + second_range[2]);

print("Results:");
print("First range: " + count1 + "/3");
print("After vector: " + count2 + "/3");
print("Inclusive: " + count3 + "/4");

if (count1 == 3) {
    print("PASS: First range works");
} else {
    print("FAIL: First range broken");
}

if (count2 == 0) {
    print("BUG: Range fails after vector");
} else {
    print("OK: Range works after vector");
}

if (count3 == 4) {
    print("KEY: Inclusive ranges work");
} else {
    print("ISSUE: Inclusive also broken");
}
