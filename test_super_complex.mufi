class Base {
  init(x) {
    self.x = x;
    print "Base.init(" + x + ")";
  }

  value() {
    return self.x;
  }
  
  describe() {
    print "Base with value: " + self.value();
  }
}

class Middle < Base {
  init(x, y) {
    super.init(x);
    self.y = y;
    print "Middle.init(" + y + ")";
  }
  
  value() {
    return self.x + self.y;
  }
}

class Derived < Middle {
  init(x, y, z) {
    super.init(x, y);
    self.z = z;
    print "Derived.init(" + z + ")";
  }
  
  describe() {
    print "Before super call";
    super.describe();
    print "After super call";
  }
  
  value() {
    return super.value() + self.z;
  }
}

var d = Derived("a", "b", "c");
print "d.value() = " + d.value();
d.describe();

// expect: Base.init(a)
// expect: Middle.init(b)
// expect: Derived.init(c)
// expect: d.value() = abc
// expect: Before super call
// expect: Base with value: abc
// expect: After super call