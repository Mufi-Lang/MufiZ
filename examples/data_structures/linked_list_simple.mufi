// Simple LinkedList class that matches the pattern used for float vectors
// This provides a clean, object-oriented interface for linked lists

class LinkedList {
    init() {
        self.data = linked_list();
    }

    // Core operations
    push(value) {
        push(self.data, value);
        return self;
    }

    push_front(value) {
        push_front(self.data, value);
        return self;
    }

    pop() {
        return pop(self.data);
    }

    pop_front() {
        return pop_front(self.data);
    }

    // Access operations
    at(index) {
        return nth(self.data, index);
    }

    len() {
        return len(self.data);
    }

    // Search and manipulation
    search(value) {
        return search(self.data, value);
    }

    sort() {
        sort(self.data);
        return self;
    }

    reverse() {
        reverse(self.data);
        return self;
    }

    // Utility methods
    is_empty() {
        return len(self.data) == 0;
    }

    clear() {
        self.data = linked_list();
        return self;
    }

    print() {
        print(self.data);
        return self;
    }
}

// Example usage
print("=== Simple LinkedList Example ===");

// Create a new linked list
var list = LinkedList();

// Add some elements
list.push(5).push(2).push(8).push(1).push(9);
print("\nAfter pushing 5, 2, 8, 1, 9:");
list.print();

// Access elements
print("\nElement at index 2: " + str(list.at(2)));
print("List length: " + str(list.len()));

// Sort the list
list.sort();
print("\nAfter sorting:");
list.print();

// Search for an element
var index = list.search(5);
print("\nIndex of value 5: " + str(index));

// Pop elements
var last = list.pop();
var first = list.pop_front();
print("\nPopped last: " + str(last));
print("Popped first: " + str(first));
print("List after pops:");
list.print();

// Reverse the list
list.reverse();
print("\nAfter reversing:");
list.print();

// Method chaining example
print("\n=== Method Chaining Example ===");
var chain_list = LinkedList();
chain_list.push(3).push(1).push(4).push(1).push(5).sort().print();

// Working with strings
print("\n=== String List Example ===");
var string_list = LinkedList();
string_list.push("apple").push("banana").push("cherry").push("date");
print("String list:");
string_list.print();

string_list.sort();
print("\nSorted string list:");
string_list.print();

// Check if element exists
var has_banana = string_list.search("banana") != -1;
print("\nContains 'banana': " + str(has_banana));

// Clear and check if empty
string_list.clear();
print("\nAfter clearing:");
print("Is empty: " + str(string_list.is_empty()));
